type VftManagerEvents = enum {
  NewAdminAdded: actor_id,
  RefundOfVaras: u128,
  VFTContractIdSet,
  MinTokensToAddSet,
  MaxTokensToBurnSet,
  TokensAdded,
  TokensBurned,
  SetTokensPerVaras,
  TotalSwapInVaras: u128,
  TokensSwapSuccessfully: struct { total_tokens: u128, total_varas: u128 },
  Error: VftManagerErrors,
};

type VftManagerErrors = enum {
  MinTokensToAdd: u128,
  MaxTokensToBurn: u128,
  InsufficientTokens: struct { total_contract_suply: u128, tokens_to_burn: u128 },
  CantSwapTokens: struct { tokens_in_vft_contract: u256 },
  CantSwapUserTokens: struct { user_tokens: u256, tokens_to_swap: u256 },
  ContractCantMint,
  CantSwapTokensWithAmount: struct { min_amount: u128, actual_amount: u128 },
  OnlyAdminsCanDoThatAction,
  VftContractIdNotSet,
  ErrorInVFTContract,
  ErrorInGetNumOfVarasToSwap,
  OperationWasNotPerformed,
};

type VftManagerQueryEvents = enum {
  ContractBalanceInVaras: u128,
  UserTotalTokensAsU128: u128,
  UserTotalTokens: u256,
  TotalTokensToSwap: u256,
  TotalTokensToSwapAsU128: u128,
  TokensToSwapOneVara: u128,
  NumOfTokensForOneVara: u128,
  Error: VftManagerErrors,
};

constructor {
  New : ();
  NewWithData : (vft_contract_id: opt actor_id, min_tokens_to_add: u128, max_tokens_to_burn: u128, tokens_per_vara: u128);
};

service VftManager {
  AddAdmin : (new_admin_address: actor_id) -> VftManagerEvents;
  AddTokensToContract : (tokens_to_add: u128) -> VftManagerEvents;
  BurnTokensFromContract : (tokens_to_burn: u128) -> VftManagerEvents;
  SetMaxTokensToBurn : (max_tokens_to_burn: u128) -> VftManagerEvents;
  SetMinTokensToAdd : (min_tokens_to_add: u128) -> VftManagerEvents;
  SetTokensPerVara : (tokens_per_vara: u128) -> VftManagerEvents;
  SetVftContractId : (vft_contract_id: actor_id) -> VftManagerEvents;
  SwapTokensByNumOfVaras : () -> VftManagerEvents;
  /// ## Swap tokens for Varas
  /// CommandReply is a helper struct that can bind tokens to the response of the contract 
  SwapTokensToVaras : (amount_of_tokens: u128) -> VftManagerEvents;
  /// ## Varas stored in contract
  query ContractTotalVarasStored : () -> VftManagerQueryEvents;
  /// ## get the amount of tokens to be able to change to one VARA
  query TokensToSwapOneVara : () -> VftManagerQueryEvents;
  /// ## Returns the total number of tokens in the contract (In U256 format)
  query TotalTokensToSwap : () -> VftManagerQueryEvents;
  /// ## Returns the total number of tokens in the contract (In u128 format)
  query TotalTokensToSwapAsU128 : () -> VftManagerQueryEvents;
};

