// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
    fn new_with_data(
        &self,
        vft_contract_id: Option<ActorId>,
        min_tokens_to_add: u128,
        max_tokens_to_burn: u128,
        tokens_per_vara: u128,
    ) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::NewWithData>::new(
            self.remoting.clone(),
            (
                vft_contract_id,
                min_tokens_to_add,
                max_tokens_to_burn,
                tokens_per_vara,
            ),
        )
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
        pub struct NewWithData(());
        impl NewWithData {
            #[allow(dead_code)]
            pub fn encode_call(
                vft_contract_id: Option<ActorId>,
                min_tokens_to_add: u128,
                max_tokens_to_burn: u128,
                tokens_per_vara: u128,
            ) -> Vec<u8> {
                <NewWithData as ActionIo>::encode_call(&(
                    vft_contract_id,
                    min_tokens_to_add,
                    max_tokens_to_burn,
                    tokens_per_vara,
                ))
            }
        }
        impl ActionIo for NewWithData {
            const ROUTE: &'static [u8] = &[44, 78, 101, 119, 87, 105, 116, 104, 68, 97, 116, 97];
            type Params = (Option<ActorId>, u128, u128, u128);
            type Reply = ();
        }
    }
}
pub struct VftManager<R> {
    remoting: R,
}
impl<R> VftManager<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::VftManager for VftManager<R> {
    type Args = R::Args;
    fn add_admin(
        &mut self,
        new_admin_address: ActorId,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::AddAdmin>::new(
            self.remoting.clone(),
            new_admin_address,
        )
    }
    fn add_tokens_to_contract(
        &mut self,
        tokens_to_add: u128,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::AddTokensToContract>::new(
            self.remoting.clone(),
            tokens_to_add,
        )
    }
    fn burn_tokens_from_contract(
        &mut self,
        tokens_to_burn: u128,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::BurnTokensFromContract>::new(
            self.remoting.clone(),
            tokens_to_burn,
        )
    }
    fn set_max_tokens_to_burn(
        &mut self,
        max_tokens_to_burn: u128,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::SetMaxTokensToBurn>::new(
            self.remoting.clone(),
            max_tokens_to_burn,
        )
    }
    fn set_min_tokens_to_add(
        &mut self,
        min_tokens_to_add: u128,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::SetMinTokensToAdd>::new(
            self.remoting.clone(),
            min_tokens_to_add,
        )
    }
    fn set_tokens_per_vara(
        &mut self,
        tokens_per_vara: u128,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::SetTokensPerVara>::new(
            self.remoting.clone(),
            tokens_per_vara,
        )
    }
    fn set_vft_contract_id(
        &mut self,
        vft_contract_id: ActorId,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::SetVftContractId>::new(
            self.remoting.clone(),
            vft_contract_id,
        )
    }
    fn swap_tokens_by_num_of_varas(
        &mut self,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::SwapTokensByNumOfVaras>::new(self.remoting.clone(), ())
    }
    /// ## Swap tokens for Varas
    /// CommandReply is a helper struct that can bind tokens to the response of the contract
    fn swap_tokens_to_varas(
        &mut self,
        amount_of_tokens: u128,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::SwapTokensToVaras>::new(
            self.remoting.clone(),
            amount_of_tokens,
        )
    }
    /// ## Varas stored in contract
    fn contract_total_varas_stored(
        &self,
    ) -> impl Query<Output = VftManagerQueryEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::ContractTotalVarasStored>::new(
            self.remoting.clone(),
            (),
        )
    }
    /// ## get the amount of tokens to be able to change to one VARA
    fn tokens_to_swap_one_vara(
        &self,
    ) -> impl Query<Output = VftManagerQueryEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::TokensToSwapOneVara>::new(self.remoting.clone(), ())
    }
    /// ## Returns the total number of tokens in the contract (In U256 format)
    fn total_tokens_to_swap(&self) -> impl Query<Output = VftManagerQueryEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::TotalTokensToSwap>::new(self.remoting.clone(), ())
    }
    /// ## Returns the total number of tokens in the contract (In u128 format)
    fn total_tokens_to_swap_as_u_128(
        &self,
    ) -> impl Query<Output = VftManagerQueryEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::TotalTokensToSwapAsU128>::new(
            self.remoting.clone(),
            (),
        )
    }
}

pub mod vft_manager {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AddAdmin(());
        impl AddAdmin {
            #[allow(dead_code)]
            pub fn encode_call(new_admin_address: ActorId) -> Vec<u8> {
                <AddAdmin as ActionIo>::encode_call(&new_admin_address)
            }
        }
        impl ActionIo for AddAdmin {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 32, 65, 100, 100, 65, 100, 109,
                105, 110,
            ];
            type Params = ActorId;
            type Reply = super::VftManagerEvents;
        }
        pub struct AddTokensToContract(());
        impl AddTokensToContract {
            #[allow(dead_code)]
            pub fn encode_call(tokens_to_add: u128) -> Vec<u8> {
                <AddTokensToContract as ActionIo>::encode_call(&tokens_to_add)
            }
        }
        impl ActionIo for AddTokensToContract {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 76, 65, 100, 100, 84, 111, 107,
                101, 110, 115, 84, 111, 67, 111, 110, 116, 114, 97, 99, 116,
            ];
            type Params = u128;
            type Reply = super::VftManagerEvents;
        }
        pub struct BurnTokensFromContract(());
        impl BurnTokensFromContract {
            #[allow(dead_code)]
            pub fn encode_call(tokens_to_burn: u128) -> Vec<u8> {
                <BurnTokensFromContract as ActionIo>::encode_call(&tokens_to_burn)
            }
        }
        impl ActionIo for BurnTokensFromContract {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 88, 66, 117, 114, 110, 84, 111,
                107, 101, 110, 115, 70, 114, 111, 109, 67, 111, 110, 116, 114, 97, 99, 116,
            ];
            type Params = u128;
            type Reply = super::VftManagerEvents;
        }
        pub struct SetMaxTokensToBurn(());
        impl SetMaxTokensToBurn {
            #[allow(dead_code)]
            pub fn encode_call(max_tokens_to_burn: u128) -> Vec<u8> {
                <SetMaxTokensToBurn as ActionIo>::encode_call(&max_tokens_to_burn)
            }
        }
        impl ActionIo for SetMaxTokensToBurn {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 72, 83, 101, 116, 77, 97, 120,
                84, 111, 107, 101, 110, 115, 84, 111, 66, 117, 114, 110,
            ];
            type Params = u128;
            type Reply = super::VftManagerEvents;
        }
        pub struct SetMinTokensToAdd(());
        impl SetMinTokensToAdd {
            #[allow(dead_code)]
            pub fn encode_call(min_tokens_to_add: u128) -> Vec<u8> {
                <SetMinTokensToAdd as ActionIo>::encode_call(&min_tokens_to_add)
            }
        }
        impl ActionIo for SetMinTokensToAdd {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 68, 83, 101, 116, 77, 105, 110,
                84, 111, 107, 101, 110, 115, 84, 111, 65, 100, 100,
            ];
            type Params = u128;
            type Reply = super::VftManagerEvents;
        }
        pub struct SetTokensPerVara(());
        impl SetTokensPerVara {
            #[allow(dead_code)]
            pub fn encode_call(tokens_per_vara: u128) -> Vec<u8> {
                <SetTokensPerVara as ActionIo>::encode_call(&tokens_per_vara)
            }
        }
        impl ActionIo for SetTokensPerVara {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 64, 83, 101, 116, 84, 111, 107,
                101, 110, 115, 80, 101, 114, 86, 97, 114, 97,
            ];
            type Params = u128;
            type Reply = super::VftManagerEvents;
        }
        pub struct SetVftContractId(());
        impl SetVftContractId {
            #[allow(dead_code)]
            pub fn encode_call(vft_contract_id: ActorId) -> Vec<u8> {
                <SetVftContractId as ActionIo>::encode_call(&vft_contract_id)
            }
        }
        impl ActionIo for SetVftContractId {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 64, 83, 101, 116, 86, 102, 116,
                67, 111, 110, 116, 114, 97, 99, 116, 73, 100,
            ];
            type Params = ActorId;
            type Reply = super::VftManagerEvents;
        }
        pub struct SwapTokensByNumOfVaras(());
        impl SwapTokensByNumOfVaras {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <SwapTokensByNumOfVaras as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for SwapTokensByNumOfVaras {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 88, 83, 119, 97, 112, 84, 111,
                107, 101, 110, 115, 66, 121, 78, 117, 109, 79, 102, 86, 97, 114, 97, 115,
            ];
            type Params = ();
            type Reply = super::VftManagerEvents;
        }
        pub struct SwapTokensToVaras(());
        impl SwapTokensToVaras {
            #[allow(dead_code)]
            pub fn encode_call(amount_of_tokens: u128) -> Vec<u8> {
                <SwapTokensToVaras as ActionIo>::encode_call(&amount_of_tokens)
            }
        }
        impl ActionIo for SwapTokensToVaras {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 68, 83, 119, 97, 112, 84, 111,
                107, 101, 110, 115, 84, 111, 86, 97, 114, 97, 115,
            ];
            type Params = u128;
            type Reply = super::VftManagerEvents;
        }
        pub struct ContractTotalVarasStored(());
        impl ContractTotalVarasStored {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ContractTotalVarasStored as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ContractTotalVarasStored {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 96, 67, 111, 110, 116, 114, 97,
                99, 116, 84, 111, 116, 97, 108, 86, 97, 114, 97, 115, 83, 116, 111, 114, 101, 100,
            ];
            type Params = ();
            type Reply = super::VftManagerQueryEvents;
        }
        pub struct TokensToSwapOneVara(());
        impl TokensToSwapOneVara {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TokensToSwapOneVara as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TokensToSwapOneVara {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 76, 84, 111, 107, 101, 110, 115,
                84, 111, 83, 119, 97, 112, 79, 110, 101, 86, 97, 114, 97,
            ];
            type Params = ();
            type Reply = super::VftManagerQueryEvents;
        }
        pub struct TotalTokensToSwap(());
        impl TotalTokensToSwap {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TotalTokensToSwap as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TotalTokensToSwap {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 68, 84, 111, 116, 97, 108, 84,
                111, 107, 101, 110, 115, 84, 111, 83, 119, 97, 112,
            ];
            type Params = ();
            type Reply = super::VftManagerQueryEvents;
        }
        pub struct TotalTokensToSwapAsU128(());
        impl TotalTokensToSwapAsU128 {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TotalTokensToSwapAsU128 as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TotalTokensToSwapAsU128 {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 92, 84, 111, 116, 97, 108, 84,
                111, 107, 101, 110, 115, 84, 111, 83, 119, 97, 112, 65, 115, 85, 49, 50, 56,
            ];
            type Params = ();
            type Reply = super::VftManagerQueryEvents;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum VftManagerEvents {
    NewAdminAdded(ActorId),
    RefundOfVaras(u128),
    VFTContractIdSet,
    MinTokensToAddSet,
    MaxTokensToBurnSet,
    TokensAdded,
    TokensBurned,
    SetTokensPerVaras,
    TotalSwapInVaras(u128),
    TokensSwapSuccessfully {
        total_tokens: u128,
        total_varas: u128,
    },
    Error(VftManagerErrors),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum VftManagerErrors {
    MinTokensToAdd(u128),
    MaxTokensToBurn(u128),
    InsufficientTokens {
        total_contract_suply: u128,
        tokens_to_burn: u128,
    },
    CantSwapTokens {
        tokens_in_vft_contract: U256,
    },
    CantSwapUserTokens {
        user_tokens: U256,
        tokens_to_swap: U256,
    },
    ContractCantMint,
    CantSwapTokensWithAmount {
        min_amount: u128,
        actual_amount: u128,
    },
    OnlyAdminsCanDoThatAction,
    VftContractIdNotSet,
    ErrorInVFTContract,
    ErrorInGetNumOfVarasToSwap,
    OperationWasNotPerformed,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum VftManagerQueryEvents {
    ContractBalanceInVaras(u128),
    UserTotalTokensAsU128(u128),
    UserTotalTokens(U256),
    TotalTokensToSwap(U256),
    TotalTokensToSwapAsU128(u128),
    TokensToSwapOneVara(u128),
    NumOfTokensForOneVara(u128),
    Error(VftManagerErrors),
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
        fn new_with_data(
            &self,
            vft_contract_id: Option<ActorId>,
            min_tokens_to_add: u128,
            max_tokens_to_burn: u128,
            tokens_per_vara: u128,
        ) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait VftManager {
        type Args;
        fn add_admin(
            &mut self,
            new_admin_address: ActorId,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn add_tokens_to_contract(
            &mut self,
            tokens_to_add: u128,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn burn_tokens_from_contract(
            &mut self,
            tokens_to_burn: u128,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn set_max_tokens_to_burn(
            &mut self,
            max_tokens_to_burn: u128,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn set_min_tokens_to_add(
            &mut self,
            min_tokens_to_add: u128,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn set_tokens_per_vara(
            &mut self,
            tokens_per_vara: u128,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn set_vft_contract_id(
            &mut self,
            vft_contract_id: ActorId,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn swap_tokens_by_num_of_varas(
            &mut self,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn swap_tokens_to_varas(
            &mut self,
            amount_of_tokens: u128,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn contract_total_varas_stored(
            &self,
        ) -> impl Query<Output = VftManagerQueryEvents, Args = Self::Args>;
        fn tokens_to_swap_one_vara(
            &self,
        ) -> impl Query<Output = VftManagerQueryEvents, Args = Self::Args>;
        fn total_tokens_to_swap(
            &self,
        ) -> impl Query<Output = VftManagerQueryEvents, Args = Self::Args>;
        fn total_tokens_to_swap_as_u_128(
            &self,
        ) -> impl Query<Output = VftManagerQueryEvents, Args = Self::Args>;
    }
}
